// F√ºr die Hilfe-Ansicht
use super::common::*;
use super::Tab;
use ratatui::{
    widgets::{Wrap, BorderType},
    prelude::Alignment,
};

pub fn create_help(tab: &Tab) -> Paragraph<'static> {
    let content = match tab {
        Tab::Dashboard => vec![
            Line::from(vec![
                Span::styled("Dashboard √úbersicht", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from("Das Dashboard zeigt den aktuellen Status Ihres Bitcoin Nodes:"),
            Line::from(""),
            Line::from(vec![
                Span::styled("‚ö° Netzwerk & Verbindungen", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Netzwerk: main/test/regtest/signet"),
            Line::from(" ‚Ä¢ Peers: Verbundene Nodes (>8 empfohlen)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üì¶ Blockchain Status", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Bl√∂cke: Aktuelle Blockchain-H√∂he"),
            Line::from(" ‚Ä¢ Headers: Bekannte Block-Header"),
            Line::from(" ‚Ä¢ Difficulty: Mining-Schwierigkeit (je h√∂her, desto schwerer ist es einen Block zu finden)"),
            Line::from("              Aktuelle Difficulty: ~108.52T = 108,522,647,629,298"),
            Line::from(" ‚Ä¢ Chain Work: Gesamte Mining-Arbeit seit Genesis (Hexadezimal, beginnt mit vielen Nullen)"),
            Line::from("              Format: 0x + 64 Stellen (je mehr Stellen ‚â† 0 am Ende, desto mehr Arbeit wurde geleistet)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîÑ Synchronisation", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Status: Fortschritt in % (gr√ºn = synchronisiert)"),
            Line::from(" ‚Ä¢ IBD: Initial Block Download - Download der kompletten Blockchain"),
            Line::from("        'Aktiv' = Node l√§dt noch Bl√∂cke herunter"),
            Line::from("        'Abgeschlossen' = Node ist auf aktuellem Stand"),
            Line::from(" ‚Ä¢ Speicherplatz: Blockchain-Gr√∂√üe auf Festplatte"),
            Line::from(" ‚Ä¢ Pruned: Reduzierte Blockchain-Gr√∂√üe aktiv?"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üí≠ Mempool", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Transaktionen: Unbest√§tigte TXs im lokalen Mempool"),
            Line::from("                  (Kann von anderen Nodes/Websites abweichen,"),
            Line::from("                   da jeder Node seinen eigenen Mempool hat)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ +/-: Update-Intervall anpassen"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Navigation:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ 1-8: Tabs direkt ausw√§hlen"),
        ],
        Tab::BlockDetails => vec![
            Line::from(vec![
                Span::styled("Block Details", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üì¶ Block Information", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H√∂he: Position des Blocks in der Blockchain"),
            Line::from(" ‚Ä¢ Hash: Eindeutige Block-ID (64 Zeichen)"),
            Line::from(" ‚Ä¢ Zeit: Zeitstempel der Block-Erstellung (UTC)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîç Block Details", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Transaktionen: Vom Miner ausgew√§hlte TXs aus dem Mempool"),
            Line::from("                  (Meist die mit den h√∂chsten Geb√ºhren)"),
            Line::from(" ‚Ä¢ Gr√∂√üe: Maximale Blockgr√∂√üe 4MB (Weight Units)"),
            Line::from(" ‚Ä¢ Gewicht: Tats√§chliche Nutzung der 4MB Kapazit√§t"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîß Technische Details", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Version: Protokoll-Version des Blocks"),
            Line::from("          Definiert die g√ºltigen Regeln f√ºr diesen Block"),
            Line::from(" ‚Ä¢ Merkle Root: Kryptographische Zusammenfassung aller Transaktionen"),
            Line::from("              Stellt sicher, dass keine Transaktion ver√§ndert wurde"),
            Line::from(" ‚Ä¢ Bits: Zielwert f√ºr g√ºltige Block-Hashes"),
            Line::from("        - Ist wie eine 'Messlatte' f√ºr die Mining-Schwierigkeit"),
            Line::from("        - Der Block-Hash muss unter diesem Wert liegen"),
            Line::from("        - Wird alle 2 Wochen automatisch angepasst:"),
            Line::from("          ‚Ä¢ Zu viele Bl√∂cke = Bits wird kleiner (schwieriger)"),
            Line::from("          ‚Ä¢ Zu wenige Bl√∂cke = Bits wird gr√∂√üer (leichter)"),
            Line::from(" ‚Ä¢ Nonce: Zufallszahl, die der Miner gefunden hat"),
            Line::from("         Wird so lange ver√§ndert, bis ein g√ºltiger Block entsteht"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîé Block Suche", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Beim Start ausw√§hlen:"),
            Line::from("   1) Aktueller Block"),
            Line::from("   2) Block nach H√∂he suchen"),
            Line::from("   3) Block nach Hash suchen"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::Mempool => vec![
            Line::from(vec![
                Span::styled("Mempool Status", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üí≠ Was ist der Mempool?", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Warteschlange f√ºr unbest√§tigte Bitcoin-Transaktionen"),
            Line::from(" ‚Ä¢ Jeder Node hat seinen eigenen Mempool"),
            Line::from(" ‚Ä¢ Miner w√§hlen Transaktionen mit den h√∂chsten Geb√ºhren"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üìä Geb√ºhren-Kategorien", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ No Priority     : Sehr lange Wartezeit (mehrere Tage/Wochen)"),
            Line::from(" ‚Ä¢ Low Priority    : L√§ngere Wartezeit (~1 Tag)"),
            Line::from(" ‚Ä¢ Medium Priority : Mittlere Wartezeit (~6 Stunden)"),
            Line::from(" ‚Ä¢ High Priority   : Schnelle Best√§tigung (~20-30 Minuten)"),
            Line::from(""),
            Line::from(" Die sat/vB Werte passen sich dynamisch an die Netzwerkauslastung an."),
            Line::from(" H√∂here Auslastung = h√∂here Geb√ºhren f√ºr schnelle Best√§tigung."),
            Line::from(""),
            Line::from(" sat/vB = Satoshi pro virtuellem Byte (Transaktionsgr√∂√üe)"),
            Line::from(" $-Preis basiert auf einer Standard-TX (250 vBytes)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üíæ Speicher-Management", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Aktuell: Momentane Gr√∂√üe des Mempools in MB"),
            Line::from(" ‚Ä¢ Maximum: Speicherlimit des Mempools (standard: 300 MB)"),
            Line::from("            Wenn voll: Neue TX verdr√§ngt alte TX mit niedrigerer Geb√ºhr"),
            Line::from("            Dies stellt sicher, dass immer die wertvollsten TXs behalten werden"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîÑ Aktualisierung", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Manuell mit [R] Taste"),
            Line::from(" ‚Ä¢ üîÑ zeigt aktive Aktualisierung an"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Hinweise:", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Geb√ºhren werden vom Node gesch√§tzt"),
            Line::from(" ‚Ä¢ Sch√§tzungen basieren auf:"),
            Line::from("   - Aktuellem Mempool"),
            Line::from("   - Historischen Daten"),
            Line::from("   - Netzwerkaktivit√§t"),
            Line::from(" ‚Ä¢ Aktualisierung kann einige Sekunden dauern"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::Network => vec![
            Line::from(vec![
                Span::styled("Netzwerk & Peers", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("‚ö° Netzwerk Status", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Netzwerk: main = Mainnet, test = Testnet"),
            Line::from(" ‚Ä¢ Synchronisation: Fortschritt des Block-Downloads"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîå Verbindungen", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Gesamt: Anzahl aller Verbindungen (mindestens 8 empfohlen)"),
            Line::from(" ‚Ä¢ Eingehend: Andere Nodes verbinden sich zu uns"),
            Line::from(" ‚Ä¢ Ausgehend: Wir verbinden uns zu anderen Nodes"),
            Line::from(" ‚Ä¢ Tor: Verbindungen √ºber das Tor-Netzwerk (Privatsph√§re)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üìä Latenz-Werte", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("Gr√ºn", Style::default().fg(Color::Green)),
                Span::raw(" < 100ms = Sehr gute Verbindung"),
            ]),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("Gelb", Style::default().fg(Color::Yellow)),
                Span::raw(" 100-500ms = Normale Verbindung"),
            ]),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("Rot", Style::default().fg(Color::Red)),
                Span::raw(" > 500ms = Langsame Verbindung"),
            ]),
            Line::from(""),
            Line::from(" Die Latenz zeigt die Reaktionszeit der Verbindungen:"),
            Line::from(" ‚Ä¢ Minimum = Schnellste Verbindung"),
            Line::from(" ‚Ä¢ Maximum = Langsamste Verbindung"),
            Line::from(" ‚Ä¢ Durchschnitt = Mittlere Geschwindigkeit aller Verbindungen"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::PeerList => vec![
            Line::from(vec![
                Span::styled("Peer Liste", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üìã Spalten-Erkl√§rung", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Adresse: IP oder .onion Adresse des Peers"),
            Line::from("   - üßÖ = Tor-Verbindung (anonym)"),
            Line::from("   - IP = Direkte Verbindung"),
            Line::from(""),
            Line::from(" ‚Ä¢ Version: Bitcoin Client und Version des Peers"),
            Line::from("   z.B. /Satoshi:25.0.0/ = Bitcoin Core v25.0.0"),
            Line::from(""),
            Line::from(" ‚Ä¢ Latenz: Reaktionszeit der Verbindung"),
            Line::from(vec![
                Span::raw("   - "),
                Span::styled("Gr√ºn", Style::default().fg(Color::Green)),
                Span::raw(" < 100ms: Sehr schnell"),
            ]),
            Line::from(vec![
                Span::raw("   - "),
                Span::styled("Gelb", Style::default().fg(Color::Yellow)),
                Span::raw(" 100-500ms: Normal"),
            ]),
            Line::from(vec![
                Span::raw("   - "),
                Span::styled("Rot", Style::default().fg(Color::Red)),
                Span::raw(" > 500ms: Langsam"),
            ]),
            Line::from(""),
            Line::from(" ‚Ä¢ Verbunden: Zeit seit Verbindungsaufbau"),
            Line::from("   - d = Tage"),
            Line::from("   - h = Stunden"),
            Line::from("   - m = Minuten"),
            Line::from(""),
            Line::from(" ‚Ä¢ Senden/Empfangen: Daten√ºbertragung in MB"),
            Line::from("   - Links: Gesendete Daten"),
            Line::from("   - Rechts: Empfangene Daten"),
            Line::from(""),
            Line::from(" ‚Ä¢ Typ: Art der Verbindung"),
            Line::from("   - Eingehend: Peer hat sich mit uns verbunden"),
            Line::from("   - Ausgehend: Wir haben uns mit Peer verbunden"),
            Line::from(""),
            Line::from(vec![
                Span::styled("‚ÑπÔ∏è  Hinweise", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Liste ist nach Latenz sortiert (schnellste zuerst)"),
            Line::from(" ‚Ä¢ Ausgewogene Mischung aus Ein-/Ausgehend ist optimal"),
            Line::from(" ‚Ä¢ Mehrere Tor-Verbindungen erh√∂hen die Privatsph√§re"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::Mining => vec![
            Line::from(vec![
                Span::styled("Mining Status", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üìä Difficulty", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Schwierigkeitsgrad f√ºr das Mining"),
            Line::from(" ‚Ä¢ Wissenschaftliche Notation (z.B. 5.3e13)"),
            Line::from(" ‚Ä¢ Dezimaldarstellung zum Vergleich"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîÑ Difficulty-Anpassung", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Findet alle 2016 Bl√∂cke statt (~2 Wochen)"),
            Line::from(" ‚Ä¢ Ziel: 1 Block alle 10 Minuten"),
            Line::from(" ‚Ä¢ Gr√ºn = wird leichter"),
            Line::from(" ‚Ä¢ Rot = wird schwerer"),
            Line::from(""),
            Line::from(vec![
                Span::styled("‚ö° Hashrate", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Rechenleistung des gesamten Netzwerks"),
            Line::from(" ‚Ä¢ Einheiten:"),
            Line::from("   - EH/s = Exa-Hashes pro Sekunde (10¬π‚Å∏)"),
            Line::from("   - PH/s = Peta-Hashes pro Sekunde (10¬π‚Åµ)"),
            Line::from("   - TH/s = Tera-Hashes pro Sekunde (10¬π¬≤)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::Security => vec![
            Line::from(vec![
                Span::styled("Sicherheitsstatus", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üì¶ Software", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Version: Aktuelle Bitcoin Core Version"),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("Gr√ºn", Style::default().fg(Color::Green)),
                Span::raw(" = Aktuell, "),
                Span::styled("Rot", Style::default().fg(Color::Red)),
                Span::raw(" = Update verf√ºgbar"),
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîå Netzwerk", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Verbindungen: Verh√§ltnis Tor zu direkten Verbindungen"),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("Gr√ºn", Style::default().fg(Color::Green)),
                Span::raw(" = Mehr Tor als direkte Verbindungen (besser f√ºr Privatsph√§re)"),
            ]),
            Line::from(" ‚Ä¢ Firewall: Schutz vor unerw√ºnschten Verbindungen"),
            Line::from(" ‚Ä¢ Tor: Anonymes Routing f√ºr mehr Privatsph√§re"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîê Zugriffskontrolle", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ RPC Zugriff: API-Zugriffsbeschr√§nkungen"),
            Line::from("   - IP-Beschr√§nkung"),
            Line::from("   - SSL/TLS Verschl√ºsselung"),
            Line::from("   - Benutzer-Authentifizierung"),
            Line::from("   - Befehlseinschr√§nkungen"),
            Line::from(" ‚Ä¢ Wallet: Verschl√ºsselung der Wallet-Datei"),
            Line::from(" ‚Ä¢ Festplatte: System-Verschl√ºsselung"),
            Line::from(""),
            Line::from(vec![
                Span::styled("‚è∞ System", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Uptime: Laufzeit seit letztem Neustart"),
            Line::from(" ‚Ä¢ Backup: Status der Wallet-Sicherung"),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("Gr√ºn", Style::default().fg(Color::Green)),
                Span::raw(" = < 7 Tage, "),
                Span::styled("Gelb", Style::default().fg(Color::Yellow)),
                Span::raw(" = > 7 Tage, "),
                Span::styled("Rot", Style::default().fg(Color::Red)),
                Span::raw(" = Kein Backup"),
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::TxDetails => vec![
            Line::from(vec![
                Span::styled("Transaction Details", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üìã Informationen", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ TXID: Eindeutige Transaktions-ID (64 Zeichen Hex)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üí∞ Inputs & Outputs", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Inputs: Vorherige Transaktionen, die als Quelle dienen"),
            Line::from("   - Zeigt die TXIDs der Quell-Transaktionen"),
            Line::from("   - Jeder Input verweist auf einen fr√ºheren Output"),
            Line::from(""),
            Line::from(" ‚Ä¢ Outputs: Empf√§nger und gesendete Betr√§ge"),
            Line::from("   - Zeigt Betrag in BTC und Empf√§nger-Adresse"),
            Line::from("   - Format: [Betrag] BTC ‚Üí [Adresse]"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîß Technische Details", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Gr√∂√üe: Tats√§chliche Gr√∂√üe in Bytes"),
            Line::from("   - Wie viel Speicherplatz die Transaktion ben√∂tigt"),
            Line::from("   - Je gr√∂√üer, desto h√∂here Transaktionsgeb√ºhren"),
            Line::from("   - Typische Gr√∂√üen: 200-500 Bytes f√ºr einfache TX"),
            Line::from(""),
            Line::from(" ‚Ä¢ Gewicht (Weight Units / WU):"),
            Line::from("   - Ein Ma√ü f√ºr die 'Schwere' der Transaktion"),
            Line::from("   - Neueres System f√ºr fairere Geb√ºhrenberechnung"),
            Line::from("   - SegWit-Transaktionen sparen Geb√ºhren"),
            Line::from("   - Typische Werte: 800-2000 WU f√ºr normale TX"),
            Line::from(""),
            Line::from(" ‚Ä¢ Zeit: Wann wurde die Transaktion verarbeitet?"),
            Line::from("   - Zeitpunkt der ersten Best√§tigung im Netzwerk"),
            Line::from("   - Wichtig f√ºr die chronologische Reihenfolge"),
            Line::from(""),
            Line::from(" ‚Ä¢ Block: In welchem Block ist die TX gespeichert?"),
            Line::from("   - Jeder Block hat eine eindeutige Block-Hash"),
            Line::from("   - Zeigt, wann die TX endg√ºltig best√§tigt wurde"),
            Line::from("   - Je mehr Bl√∂cke danach, desto sicherer"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::AddressDetails => vec![
            Line::from(vec![
                Span::styled("Address Details", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üìã Informationen", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Adresse: Bitcoin-Adresse oder Public Key"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîç Adresstypen", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Native SegWit (bc1...)"),
            Line::from("   - Neuester Standard"),
            Line::from("   - Niedrigste Geb√ºhren"),
            Line::from("   - Beginnt mit 'bc1'"),
            Line::from(""),
            Line::from(" ‚Ä¢ Nested SegWit (3...)"),
            Line::from("   - Kompatibilit√§tsformat"),
            Line::from("   - Mittlere Geb√ºhren"),
            Line::from("   - Beginnt mit '3'"),
            Line::from(""),
            Line::from(" ‚Ä¢ Legacy (1...)"),
            Line::from("   - Urspr√ºngliches Format"),
            Line::from("   - H√∂chste Geb√ºhren"),
            Line::from("   - Beginnt mit '1'"),
            Line::from(""),
            Line::from(" ‚Ä¢ Public Key (Hex)"),
            Line::from("   - 130 Zeichen hexadezimal"),
            Line::from("   - Wird f√ºr spezielle Anwendungen verwendet"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üí∞ Details", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Balance: Aktuelles Guthaben in BTC"),
            Line::from(" ‚Ä¢ Transaktionen: Anzahl aller Transaktionen"),
            Line::from(" ‚Ä¢ Script: Technische Details zum Adresstyp"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
    };

    Paragraph::new(content)
        .block(Block::default()
            .title(" ‚ÑπÔ∏è  Hilfe ")
            .title_alignment(Alignment::Center)
            .borders(Borders::ALL)
            .border_style(Style::default()
                .fg(Color::Cyan)
                .add_modifier(Modifier::BOLD))
            .border_type(BorderType::Double)
            .style(Style::default()
                .bg(Color::Black)))
        .style(Style::default()
            .fg(Color::White)
            .bg(Color::Black))
        .alignment(Alignment::Left)
        .wrap(Wrap { trim: true })
} 