// F√ºr die Hilfe-Ansicht
use super::common::*;
use super::Tab;
use ratatui::{
    widgets::{Wrap, BorderType},
    prelude::Alignment,
};

pub fn create_help(tab: &Tab) -> Paragraph<'static> {
    let content = match tab {
        Tab::Dashboard => vec![
            Line::from(vec![
                Span::styled("Dashboard √úbersicht", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from("Das Dashboard zeigt den aktuellen Status Ihres Bitcoin Nodes:"),
            Line::from(""),
            Line::from(vec![
                Span::styled("‚ö° Netzwerk & Verbindungen", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Netzwerk: main/test/regtest/signet"),
            Line::from(" ‚Ä¢ Peers: Verbundene Nodes (>8 empfohlen)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üì¶ Blockchain Status", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Bl√∂cke: Aktuelle Blockchain-H√∂he"),
            Line::from(" ‚Ä¢ Headers: Bekannte Block-Header"),
            Line::from(" ‚Ä¢ Difficulty: Mining-Schwierigkeit (je h√∂her, desto schwerer ist es einen Block zu finden)"),
            Line::from("              Aktuelle Difficulty: ~108.52T = 108,522,647,629,298"),
            Line::from(" ‚Ä¢ Chain Work: Gesamte Mining-Arbeit seit Genesis (Hexadezimal, beginnt mit vielen Nullen)"),
            Line::from("              Format: 0x + 64 Stellen (je mehr Stellen ‚â† 0 am Ende, desto mehr Arbeit wurde geleistet)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîÑ Synchronisation", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Status: Fortschritt in % (gr√ºn = synchronisiert)"),
            Line::from(" ‚Ä¢ IBD: Initial Block Download - Download der kompletten Blockchain"),
            Line::from("        'Aktiv' = Node l√§dt noch Bl√∂cke herunter"),
            Line::from("        'Abgeschlossen' = Node ist auf aktuellem Stand"),
            Line::from(" ‚Ä¢ Speicherplatz: Blockchain-Gr√∂√üe auf Festplatte"),
            Line::from(" ‚Ä¢ Pruned: Reduzierte Blockchain-Gr√∂√üe aktiv?"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üí≠ Mempool", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Transaktionen: Unbest√§tigte TXs im lokalen Mempool"),
            Line::from("                  (Kann von anderen Nodes/Websites abweichen,"),
            Line::from("                   da jeder Node seinen eigenen Mempool hat)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ +/-: Update-Intervall anpassen"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Navigation:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ 1-8: Tabs direkt ausw√§hlen"),
        ],
        Tab::BlockDetails => vec![
            Line::from(vec![
                Span::styled("Block Details", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üì¶ Block Information", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H√∂he: Position des Blocks in der Blockchain"),
            Line::from(" ‚Ä¢ Hash: Eindeutige Block-ID (64 Zeichen)"),
            Line::from(" ‚Ä¢ Zeit: Zeitstempel der Block-Erstellung (UTC)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîç Block Details", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Transaktionen: Vom Miner ausgew√§hlte TXs aus dem Mempool"),
            Line::from("                  (Meist die mit den h√∂chsten Geb√ºhren)"),
            Line::from(" ‚Ä¢ Gr√∂√üe: Maximale Blockgr√∂√üe 4MB (Weight Units)"),
            Line::from(" ‚Ä¢ Gewicht: Tats√§chliche Nutzung der 4MB Kapazit√§t"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîß Technische Details", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Version: Protokoll-Version des Blocks"),
            Line::from("          Definiert die g√ºltigen Regeln f√ºr diesen Block"),
            Line::from(" ‚Ä¢ Merkle Root: Kryptographische Zusammenfassung aller Transaktionen"),
            Line::from("              Stellt sicher, dass keine Transaktion ver√§ndert wurde"),
            Line::from(" ‚Ä¢ Bits: Zielwert f√ºr g√ºltige Block-Hashes"),
            Line::from("        - Ist wie eine 'Messlatte' f√ºr die Mining-Schwierigkeit"),
            Line::from("        - Der Block-Hash muss unter diesem Wert liegen"),
            Line::from("        - Wird alle 2 Wochen automatisch angepasst:"),
            Line::from("          ‚Ä¢ Zu viele Bl√∂cke = Bits wird kleiner (schwieriger)"),
            Line::from("          ‚Ä¢ Zu wenige Bl√∂cke = Bits wird gr√∂√üer (leichter)"),
            Line::from(" ‚Ä¢ Nonce: Zufallszahl, die der Miner gefunden hat"),
            Line::from("         Wird so lange ver√§ndert, bis ein g√ºltiger Block entsteht"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîé Block Suche", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Beim Start ausw√§hlen:"),
            Line::from("   1) Aktueller Block"),
            Line::from("   2) Block nach H√∂he suchen"),
            Line::from("   3) Block nach Hash suchen"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::Mempool => vec![
            Line::from(vec![
                Span::styled("Mempool Status", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(""),
            Line::from(vec![
                Span::styled("üí≠ Was ist der Mempool?", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Warteschlange f√ºr unbest√§tigte Bitcoin-Transaktionen"),
            Line::from(" ‚Ä¢ Jeder Node hat seinen eigenen Mempool"),
            Line::from(" ‚Ä¢ Miner w√§hlen Transaktionen mit den h√∂chsten Geb√ºhren"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üìä Geb√ºhren-Kategorien", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ No Priority     : Sehr lange Wartezeit (mehrere Tage/Wochen)"),
            Line::from(" ‚Ä¢ Low Priority    : L√§ngere Wartezeit (~1 Tag)"),
            Line::from(" ‚Ä¢ Medium Priority : Mittlere Wartezeit (~6 Stunden)"),
            Line::from(" ‚Ä¢ High Priority   : Schnelle Best√§tigung (~20-30 Minuten)"),
            Line::from(""),
            Line::from(" Die sat/vB Werte passen sich dynamisch an die Netzwerkauslastung an."),
            Line::from(" H√∂here Auslastung = h√∂here Geb√ºhren f√ºr schnelle Best√§tigung."),
            Line::from(""),
            Line::from(" sat/vB = Satoshi pro virtuellem Byte (Transaktionsgr√∂√üe)"),
            Line::from(" $-Preis basiert auf einer Standard-TX (250 vBytes)"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üíæ Speicher-Management", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Aktuell: Momentane Gr√∂√üe des Mempools in MB"),
            Line::from(" ‚Ä¢ Maximum: Speicherlimit des Mempools (standard: 300 MB)"),
            Line::from("            Wenn voll: Neue TX verdr√§ngt alte TX mit niedrigerer Geb√ºhr"),
            Line::from("            Dies stellt sicher, dass immer die wertvollsten TXs behalten werden"),
            Line::from(""),
            Line::from(vec![
                Span::styled("üîÑ Aktualisierung", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Automatisch alle 30 Sekunden"),
            Line::from(" ‚Ä¢ Manuell mit [R] Taste"),
            Line::from(" ‚Ä¢ üîÑ zeigt aktive Aktualisierung an"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Hinweise:", 
                    Style::default().fg(Color::Cyan).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ Geb√ºhren werden vom Node gesch√§tzt"),
            Line::from(" ‚Ä¢ Sch√§tzungen basieren auf:"),
            Line::from("   - Aktuellem Mempool"),
            Line::from("   - Historischen Daten"),
            Line::from("   - Netzwerkaktivit√§t"),
            Line::from(" ‚Ä¢ Aktualisierung kann einige Sekunden dauern"),
            Line::from(""),
            Line::from(vec![
                Span::styled("Tastenkombinationen:", 
                    Style::default().fg(Color::Yellow).add_modifier(Modifier::BOLD))
            ]),
            Line::from(" ‚Ä¢ H: Diese Hilfe ein-/ausblenden"),
            Line::from(" ‚Ä¢ R: Daten aktualisieren"),
            Line::from(" ‚Ä¢ Q: Programm beenden"),
        ],
        Tab::Network => vec![
            Line::from(vec![
                Span::styled("Netzwerk & Peers", Style::default().fg(Color::Yellow)),
            ]),
            Line::from(""),
            Line::from("Tastenbelegung:"),
            Line::from(" [R] Aktualisieren"),
            Line::from(" [H] Hilfe ausblenden"),
            Line::from(""),
            Line::from("Verbindungen:"),
            Line::from(" ‚Ä¢ Gesamtzahl und Onion-Anteil"),
            Line::from(" ‚Ä¢ Beste/Schlechteste Latenz"),
            Line::from(""),
            Line::from("Latenz-Werte:"),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("< 100ms", Style::default().fg(Color::Green)),
                Span::raw(" = sehr gut"),
            ]),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("100-500ms", Style::default().fg(Color::Yellow)),
                Span::raw(" = normal"),
            ]),
            Line::from(vec![
                Span::raw(" ‚Ä¢ "),
                Span::styled("> 500ms", Style::default().fg(Color::Red)),
                Span::raw(" = langsam"),
            ]),
        ],
        Tab::PeerList => vec![
            Line::from(vec![
                Span::styled("Peer Liste", Style::default().fg(Color::Yellow)),
            ]),
            Line::from(""),
            Line::from(" ‚Ä¢ Liste aller verbundenen Peers"),
            Line::from(" ‚Ä¢ Sortiert nach Latenz"),
            Line::from(" ‚Ä¢ Onion/Clearnet Status"),
        ],
        Tab::Mining => vec![
            Line::from(vec![
                Span::styled("Mining Status", Style::default().fg(Color::Yellow)),
            ]),
            Line::from(""),
            Line::from("Tastenbelegung:"),
            Line::from(" [R] Aktualisieren"),
            Line::from(" [H] Hilfe ausblenden"),
            Line::from(""),
            Line::from("Informationen:"),
            Line::from(" ‚Ä¢ Aktuelle Difficulty"),
            Line::from(" ‚Ä¢ Netzwerk-Hashrate"),
            Line::from(" ‚Ä¢ Zeit bis Difficulty-Anpassung"),
            Line::from(" ‚Ä¢ Mining-Pool Verteilung"),
        ],
        Tab::Security => vec![
            Line::from(vec![
                Span::styled("Sicherheitsstatus", Style::default().fg(Color::Yellow)),
            ]),
            Line::from(""),
            Line::from("Tastenbelegung:"),
            Line::from(" [R] Aktualisieren"),
            Line::from(" [H] Hilfe ausblenden"),
            Line::from(""),
            Line::from("√úberwachung:"),
            Line::from(" ‚Ä¢ Softwareversion-Check"),
            Line::from(" ‚Ä¢ Peer-Verbindungssicherheit"),
            Line::from(" ‚Ä¢ Firewall-Status"),
            Line::from(" ‚Ä¢ Tor-Verbindungsqualit√§t"),
        ],
        Tab::Explorer => vec![
            Line::from(vec![
                Span::styled("Blockchain Explorer", Style::default().fg(Color::Yellow)),
            ]),
            Line::from(""),
            Line::from("Tastenbelegung:"),
            Line::from(" [B] Block suchen"),
            Line::from(" [T] Transaktion suchen"),
            Line::from(" [A] Adresse suchen"),
            Line::from(" [Enter] Suche ausf√ºhren"),
            Line::from(" [Esc] Suche abbrechen"),
            Line::from(""),
            Line::from("Suchoptionen:"),
            Line::from(" ‚Ä¢ Block: H√∂he oder Hash"),
            Line::from(" ‚Ä¢ Transaktion: TXID"),
            Line::from(" ‚Ä¢ Adresse: Base58 oder Bech32"),
        ],
    };

    Paragraph::new(content)
        .block(Block::default()
            .title(" ‚ÑπÔ∏è  Hilfe ")
            .title_alignment(Alignment::Center)
            .borders(Borders::ALL)
            .border_style(Style::default()
                .fg(Color::Cyan)
                .add_modifier(Modifier::BOLD))
            .border_type(BorderType::Double)
            .style(Style::default()
                .bg(Color::Black)))
        .style(Style::default()
            .fg(Color::White)
            .bg(Color::Black))
        .alignment(Alignment::Left)
        .wrap(Wrap { trim: true })
} 